#!/bin/bash
# Pre-commit hook to prevent accidental commits of sensitive files

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check for sensitive files
SENSITIVE_PATTERNS=(
    "\.env$"
    "\.env\."
    "\.pem$"
    "\.key$"
    "\.p12$"
    "\.pfx$"
    "\.cert$"
    "\.crt$"
    "id_rsa"
    "id_dsa"
    "id_ecdsa"
    "id_ed25519"
    "\.aws/credentials"
    "\.aws/config"
    "\.ssh/"
)

# Check for sensitive content patterns
SENSITIVE_CONTENT=(
    "PRIVATE KEY"
    "BEGIN RSA"
    "BEGIN DSA"
    "BEGIN EC"
    "BEGIN OPENSSH"
    "BEGIN PGP"
    "aws_access_key_id"
    "aws_secret_access_key"
    "AKIA[A-Z0-9]{16}"
    "github_pat_"
    "ghp_"
    "ghs_"
    "ANTHROPIC_API_KEY"
    "OPENAI_API_KEY"
    "GOOGLE_API_KEY"
    "sk-ant-"
    "sk-proj-"
)

# Function to check if file matches sensitive patterns
check_sensitive_files() {
    local files=$(git diff --cached --name-only)
    local found_sensitive=0
    
    for file in $files; do
        for pattern in "${SENSITIVE_PATTERNS[@]}"; do
            if [[ "$file" =~ $pattern ]]; then
                echo -e "${RED}ERROR: Attempting to commit sensitive file: $file${NC}"
                found_sensitive=1
            fi
        done
    done
    
    return $found_sensitive
}

# Function to check for sensitive content in staged files
check_sensitive_content() {
    local files=$(git diff --cached --name-only)
    local found_sensitive=0
    
    for file in $files; do
        # Skip binary files
        if [[ $(file -b --mime-type "$file" 2>/dev/null) =~ ^text/ ]] || [[ ! -f "$file" ]]; then
            for pattern in "${SENSITIVE_CONTENT[@]}"; do
                if git diff --cached --no-ext-diff "$file" 2>/dev/null | grep -E "$pattern" > /dev/null; then
                    echo -e "${RED}ERROR: Found sensitive content pattern '$pattern' in file: $file${NC}"
                    found_sensitive=1
                fi
            done
        fi
    done
    
    return $found_sensitive
}

# Main execution
echo -e "${YELLOW}Running pre-commit security checks...${NC}"

sensitive_files=0
sensitive_content=0

# Check for sensitive files
if ! check_sensitive_files; then
    sensitive_files=1
fi

# Check for sensitive content
if ! check_sensitive_content; then
    sensitive_content=1
fi

# If any sensitive data found, block the commit
if [[ $sensitive_files -eq 1 ]] || [[ $sensitive_content -eq 1 ]]; then
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}COMMIT BLOCKED: Sensitive data detected!${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo "To fix this:"
    echo "1. Remove the sensitive files/content from staging: git reset HEAD <file>"
    echo "2. Add the files to .gitignore if needed"
    echo "3. For secrets, use GitHub Secrets or environment variables"
    echo ""
    echo "To bypass this check (NOT RECOMMENDED):"
    echo "  git commit --no-verify"
    echo ""
    exit 1
fi

echo -e "${GREEN}✓ No sensitive data detected${NC}"
exit 0