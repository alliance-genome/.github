name: Claude Code Review (Reusable)

on:
  workflow_call:
    inputs:
      model:
        description: 'Claude model to use'
        required: false
        default: 'claude-sonnet-4-20250514'
        type: string
      max_turns:
        description: 'Maximum conversation turns'
        required: false
        default: '10'
        type: string
      review_focus:
        description: 'What to focus the review on'
        required: false
        default: 'critical bugs and database performance'
        type: string
      trigger_phrase:
        description: 'Phrase to trigger manual reviews'
        required: false
        default: '@claude'
        type: string
      use_zen_tools:
        description: 'Enable zen MCP tools for enhanced analysis'
        required: false
        default: true
        type: boolean
      pr_size_threshold:
        description: 'Line count threshold for enabling zen tools'
        required: false
        default: '300'
        type: string
      skip_threshold:
        description: 'Line count threshold to skip reviews entirely'
        required: false
        default: '25'
        type: string
    secrets:
      ANTHROPIC_API_KEY:
        description: 'Anthropic API key for Claude'
        required: true
      GOOGLE_API_KEY:
        description: 'Google API key for Gemini models (zen tools)'
        required: false
      OPENAI_API_KEY:
        description: 'OpenAI API key for o3 models (zen tools)'
        required: false

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, inputs.trigger_phrase)) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for diff calculation
        
      - name: Calculate PR size
        id: pr_size
        if: github.event_name == 'pull_request'
        run: |
          # Get the base and head commits
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Calculate lines added and removed
          DIFF_STATS=$(git diff --numstat $BASE_SHA..$HEAD_SHA)
          TOTAL_CHANGES=$(echo "$DIFF_STATS" | awk '{added+=$1; removed+=$2} END {print added+removed}')
          
          # Handle empty or malformed output - ensure it's a valid number
          TOTAL_CHANGES=${TOTAL_CHANGES:-0}
          # Validate it's numeric, default to 0 if not
          if ! [[ "$TOTAL_CHANGES" =~ ^[0-9]+$ ]]; then
            echo "Warning: Non-numeric diff result, defaulting to 0"
            TOTAL_CHANGES=0
          fi
          
          echo "Total lines changed: $TOTAL_CHANGES"
          echo "total_changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          
          # Determine review strategy based on PR size (safe numeric comparisons)
          if [ "${TOTAL_CHANGES:-0}" -lt ${{ inputs.skip_threshold }} ]; then
            echo "Trivial PR detected (<${{ inputs.skip_threshold }} lines) - skipping Claude review"
            echo "skip_review=true" >> $GITHUB_OUTPUT
            echo "use_zen_tools=false" >> $GITHUB_OUTPUT
          elif [ "${TOTAL_CHANGES:-0}" -gt ${{ inputs.pr_size_threshold }} ]; then
            echo "Large PR detected (>${{ inputs.pr_size_threshold }} lines) - enabling zen tools for enhanced analysis"
            echo "skip_review=false" >> $GITHUB_OUTPUT
            echo "use_zen_tools=true" >> $GITHUB_OUTPUT
          else
            echo "Medium PR detected (${{ inputs.skip_threshold }}-${{ inputs.pr_size_threshold }} lines) - using standard Claude review"
            echo "skip_review=false" >> $GITHUB_OUTPUT
            echo "use_zen_tools=false" >> $GITHUB_OUTPUT
          fi

      - name: Post skip message
        if: github.event_name == 'pull_request' && steps.pr_size.outputs.skip_review == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ¤– **Claude Code Review Skipped**
              
              This PR has only **${{ steps.pr_size.outputs.total_changes }} lines changed** (< ${{ inputs.skip_threshold }} lines).
              
              Claude reviews are automatically skipped for trivial changes to save costs and reduce noise.
              
              **Need a review anyway?** Comment \`${{ inputs.trigger_phrase }}\` to trigger a manual review.
              
              ---
              
              **Review thresholds:**
              - < ${{ inputs.skip_threshold }} lines: Skipped (this PR)
              - ${{ inputs.skip_threshold }}-${{ inputs.pr_size_threshold }} lines: Standard Claude review  
              - > ${{ inputs.pr_size_threshold }} lines: Enhanced multi-model analysis
              
              ---
              
              ðŸ’¡ **Claude Code Capabilities**
              
              I can help with more than just reviews! Try these:
              - **Answer Questions**: \`${{ inputs.trigger_phrase }} explain how the caching system works\`
              - **Implement Code Changes**: \`${{ inputs.trigger_phrase }} add error handling to the user login method\`
              - **Debug Issues**: \`${{ inputs.trigger_phrase }} help debug why the search is slow\`
              - **Analyze Architecture**: \`${{ inputs.trigger_phrase }} review the database schema changes\`
              
              Just comment \`${{ inputs.trigger_phrase }}\` followed by your request!`
            })
        
      - name: Setup Claude Code Review
        uses: anthropics/claude-code-action@beta
        if: github.event_name != 'pull_request' || steps.pr_size.outputs.skip_review != 'true'
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          trigger_phrase: ${{ inputs.trigger_phrase }}
          model: ${{ inputs.model }}
          max_turns: ${{ inputs.max_turns }}
          
          # Custom instructions for Alliance repositories
          custom_instructions: |
            You are reviewing code for an Alliance of Genome Resources application.
            
            FOCUS ONLY ON:
            1. Critical and blocking bugs that could cause data corruption or system failures
            2. Database performance issues (inefficient queries, N+1 problems, missing indexes)
            
            Keep reviews concise and actionable. Only flag serious issues that need immediate attention.
            
            IMPORTANT: Always end your review comments with developer usage instructions:
            
            ---
            ðŸ’¡ **Claude Code Capabilities**
            
            I can help with more than just reviews! Try these:
            - **Answer Questions**: `${{ inputs.trigger_phrase }} explain how the caching system works`
            - **Implement Code Changes**: `${{ inputs.trigger_phrase }} add error handling to the user login method`
            - **Debug Issues**: `${{ inputs.trigger_phrase }} help debug why the search is slow`
            - **Analyze Architecture**: `${{ inputs.trigger_phrase }} review the database schema changes`
            
            Just comment `${{ inputs.trigger_phrase }}` followed by your request!
          
          # Direct prompt for automated reviews
          direct_prompt: |
            ${{ github.event_name == 'pull_request' && format('
            Review this PR focusing ONLY on:
            1. Critical and blocking bugs that could cause data corruption or system failures  
            2. Database performance issues (inefficient queries, N+1 problems, missing indexes)
            
            {0}
            Keep feedback concise and actionable.
            
            IMPORTANT: Always end your review with the developer capabilities section from your custom instructions.
            ', (steps.pr_size.outputs.use_zen_tools == 'true') && 'This is a large PR (>{1} lines changed) - use the zen codereview tool with o3 and gemini-2.5-pro models for enhanced analysis.' || 'This is a small PR - perform a standard Claude review.', inputs.pr_size_threshold) || '' }}
          
          # MCP Configuration - Zen tools only for large PRs or manual reviews
          mcp_config: |
            ${{ (github.event_name != 'pull_request' || steps.pr_size.outputs.use_zen_tools == 'true') && inputs.use_zen_tools && format('{
              "mcpServers": {
                "zen": {
                  "command": "sh",
                  "args": [
                    "-c", 
                    "python -m pip install --user uv && export PATH=$PATH:$HOME/.local/bin && uvx --from git+https://github.com/BeehiveInnovations/zen-mcp-server.git zen-mcp-server"
                  ],
                  "env": {
                    "PATH": "/usr/local/bin:/usr/bin:/bin:/opt/homebrew/bin:$HOME/.local/bin",
                    "GOOGLE_API_KEY": "{0}",
                    "OPENAI_API_KEY": "{1}"
                  }
                }
              }
            }', secrets.GOOGLE_API_KEY, secrets.OPENAI_API_KEY) || '{}' }}
          
          # Allowed tools - zen tools only for large PRs or manual reviews
          allowed_tools: |
            ${{ (github.event_name != 'pull_request' || steps.pr_size.outputs.use_zen_tools == 'true') && inputs.use_zen_tools && 'mcp__zen__codereview,mcp__zen__secaudit,mcp__zen__analyze,mcp__zen__testgen,mcp__zen__debug,mcp__zen__refactor,mcp__zen__chat,mcp__zen__consensus,mcp__zen__thinkdeep,mcp__zen__planner,mcp__zen__precommit,mcp__zen__tracer,mcp__zen__docgen,mcp__zen__challenge,mcp__zen__listmodels,mcp__zen__version,Bash,Edit,Read,Write,Glob,Grep,LS' || 'Bash,Edit,Read,Write,Glob,Grep,LS' }}
          
          # Environment variables for Claude
          claude_env: |
            REPOSITORY: ${{ github.repository }}
            ORGANIZATION: ${{ github.repository_owner }}
            REVIEW_FOCUS: ${{ inputs.review_focus }}
            PR_SIZE: ${{ github.event_name == 'pull_request' && steps.pr_size.outputs.total_changes || 'N/A' }}
            ZEN_TOOLS_ENABLED: ${{ github.event_name == 'pull_request' && steps.pr_size.outputs.use_zen_tools || 'true' }}
            REVIEW_SKIPPED: ${{ github.event_name == 'pull_request' && steps.pr_size.outputs.skip_review || 'false' }}